#include <iostream>
#include <string>
#include <fstream>

using namespace std;

string file_input = "input.txt"; // файл для загрузки данных
string file_output = "output.txt"; // файл для выгрузки данных

struct list
{
    struct node // эмуляция продажи некоторой партии товара описанного: количество, цена, название, автор/создатель 
    {
        //данные
        int count;
        int cost;
        string name;
        string autor;

        string string_data;


        node* next;   //следующий элемент
        node* prev;   //предыдущий элемент
    };

    node* first = NULL;     //первый элемент
    node* last = NULL;     //последний элемент
    node* currect = NULL;     //текущий элемент
    size_t size;        //колличество элементов

    void out(); //вывод всего списка
    void info(); //информация о списке и текущем элементе
    void clear(); //очистить

    //передвижение к элементом, следующий/предыдущий/первый/последний
    bool move_next();
    bool move_prev();
    bool move_first();
    bool move_last();

    bool init(int,int,string,string); //инициализация
    
    //добовлние элемента 
    bool add_next(int, int, string, string);
    bool add_prev(int, int, string, string);
    bool add_first(int, int, string, string);
    bool add_last(int, int, string, string);
    bool add_k(int, int, int, string, string);

    //удаление элемента
    bool del(int&,int&,string&,string&);
    bool del_next(int&, int&, string&, string&);
    bool del_prev(int&, int&, string&, string&);
    bool del_first(int&, int&, string&, string&);
    bool del_last(int&, int&, string&, string&);
    bool del_k(int); // удаление k-ого элемента

    void swap(node*&, node*&); //обмен элеметов местами

    void sort_up(); // сортировка по возростанию
    void sort_down(); // сортировка по убыванию

    void in_file(string); // загрузка их файла
    void out_file(string); // выгрузка из файла

    void get(int, int&, int&, string&, string&); // выдать К-ый элемент
};

void list::get(int index, int& cost, int&count, string& name, string& autor) 
{
    if (index < 0 || index >= size) return;
    node* temp = first;
    for (int i = 0; i < index; i++) 
    {
        temp = temp->next;
    }
    cost = temp->cost;
    count = temp->count;
    name = temp->name;
    autor = temp->autor;
}

void list::in_file(string file_name) 
{
    ifstream file(file_name);
    while (!file.eof()) 
    {
        int cost, count; string name, autor;
        file >> cost >> count >> name >> autor;
        add_next(cost, count, name, autor);
    }
}
void list::out_file(string file_name) 
{
    ofstream file(file_name);
    file.clear();

    int count, cost; string name, autor;

    for (int i = 0; i < size; i++) 
    {
        get(i, cost, count, name, autor);
        file << cost << " " <<  count << " " << name << " " << autor << "\n";
    }
}

void list::swap(node*& a, node*& b) 
{
    int cost, count; string name, autor;
    cost = a->cost;
    count = a->count;
    name = a->name;
    autor = a->autor;
    a->cost = b->cost;
    a->count = b->count;
    a->name = b->name;
    a->autor = b->autor;
    b->cost = cost;
    b->count = count;
    b->name = name;
    b->autor = autor;
}
void list::sort_down() 
{
    for (int i = 0; i < size; i++) 
    {
        currect = first;
        for (int j = 0; j < size - 1; j++) 
        {
            if (currect->cost < currect->next->cost) 
            {
                swap(currect, currect->next);
            }
            currect = currect->next;
        }
    }
}
void list::sort_up()
{
    for (int i = 0; i < size; i++)
    {
        currect = first;
        for (int j = 0; j < size - 1; j++)
        {
            if (currect->cost > currect->next->cost)
            {
                swap(currect, currect->next);
            }
            currect = currect->next;
        }
    }
}

bool list::move_next()
{
    if (!first)       return false;
    if (!currect) { currect = first; return true; }
    if (!currect->next) return false;
    currect = currect->next;
    return true;
}
bool list::move_prev()
{
    if (!first)       return false;
    if (!currect) { currect = first; return true; }
    if (!currect->prev) return false;
    currect = currect->prev;
    return true;
}
bool list::move_first()
{
    if (!first) return false;
    currect = first;
    return true;
}
bool list::move_last()
{
    if (!last) return false;
    currect = last;
    return true;
}

bool list::init(int cost, int count, string name, string autor)
{
    if (!first)
    {
        first = new node;
        last = first;
        currect = first;
        first->prev = NULL;
        first->next = NULL;
        first->cost = cost;
        first->count = count;
        first->name = name;
        first->autor = autor;
        size = 1;
        return true;
    }
    else
        return false;
}
bool list::add_next(int cost, int count, string name, string autor)
{
    if (!first) return init(cost,count,name,autor);

    node* temp = currect->next;
    currect->next = new node;
    currect->next->next = temp;
    currect->next->prev = currect;

    if (!temp)
        last = currect->next;
    else
        temp->prev = currect->next;

    currect = currect->next;
    currect->cost = cost;
    currect->count = count;
    currect->name = name;
    currect->autor = autor;
    size++;
    return true;

}
bool list::add_prev(int cost, int count, string name, string autor)
{
    if (!first) return init(cost,count, name, autor);

    node* temp = currect->prev;
    currect->prev = new node;
    currect->prev->next = currect;
    currect->prev->prev = temp;

    if (!temp)
        first = currect->prev;
    else
        temp->next = currect->prev;

    currect = currect->prev;
    currect->cost = cost;
    currect->count = count;
    currect->name = name;
    currect->autor = autor;
    size++;
    return true;
}
bool list::add_first(int cost, int count, string name, string autor)
{
    if (move_first())return add_prev(cost, count, name, autor);
    else return false;
}
bool list::add_last(int cost, int count, string name, string autor)
{
    if (move_last())return add_next(cost, count, name, autor);
    else return false;
}
bool list::add_k(int k, int cost, int count, string name, string autor) 
{
    if (k < 0 || k >= size) return false;

    currect = first;
    for (int i = 0; i < k; i++)
        move_next();
    add_next(cost, count, name, autor);

    return true;
}

void list::out()
{
    if (!first) {
        cout << "List is empty" << endl;
        return;
    }

    node* temp = first;
    cout << "List: ";
    do
    {
        cout << "cost = " << temp->cost << "\tcount = " << temp->count << "\tname = " << temp->name << "\tautor = " << temp->autor << endl;
        temp = temp->next;
    } while (temp);
    cout << endl;
}
void list::info()
{

    if (size)
        cout << "List node count: "
        << size << endl;
    else
        cout << "List is empty" << endl;
    if (!currect)
        if (move_first())
            cout << "cost = " << currect->cost 
            << "\tcount = " << currect->count
            << "\tname = " << currect->name <<
            "\tautor = " << currect->autor << endl;
}

bool list::del_first(int& cost, int& count, string& name, string& autor)
{
    if (!first)      return false;
    if (currect != first)    move_first();

    node* temp = currect->next;
    cost = currect->cost;
    count = currect->count;
    name = currect->name;
    autor = currect->autor;
    if (temp) temp->prev = NULL;
    delete currect;

    currect = temp;
    first = temp;
    size--;
    if (!temp) { last = NULL; return false; }
    return true;
}
bool list::del_last(int& cost, int& count, string& name, string& autor)
{
    if (!first)      return false;
    if (currect != last)    move_last();

    node* temp = currect->prev;
    cost = currect->cost;
    count = currect->count;
    name = currect->name;
    autor = currect->autor;
    if (temp) temp->next = NULL;
    delete currect;

    currect = temp;
    last = temp;
    size--;

    if (!temp) { first = NULL; return false; }
    return true;
}
bool list::del(int& cost, int& count, string& name, string& autor)
{
    if (!first) return false;
    if (!currect) return false;

    if (currect == first) return del_first(cost,count,name,autor);
    if (currect == last) return del_last(cost,count,name,autor);

    node* temp = currect->next;
    cost = currect->cost;
    count = currect->count;
    name = currect->name;
    autor = currect->autor;
    currect->prev->next = currect->next;
    currect->next->prev = currect->prev;

    delete currect;
    currect = temp;
    size--;
    return true;
}
bool list::del_next(int& cost, int& count, string& name, string& autor)
{
    if (!first) return false;
    if (!currect) return false;
    if (move_next()) return del(cost,count,name,autor);
    return false;
}
bool list::del_prev(int& cost, int& count, string& name, string& autor)
{
    if (!first) return false;
    if (!currect) return false;
    if (move_prev()) return del(cost,count,name,autor);
    return false;
}
bool list::del_k(int index) 
{
    node* temp = first;
    for (int i = 0; i < index; i++) 
    {
        temp = temp->next;
    }
    del(temp->cost, temp->count, temp->name, temp->autor);
    return true;
}

void list::clear()
{
    first = first->next;
    
    while (first) 
    {
        first->prev = NULL;
        first = first->next;
    }
    size = 0;
}

int main()
{
    setlocale(LC_ALL, "ru");

    list this_list;

    this_list.in_file(file_input);

    int command = -1;
    while (true) 
    {
        this_list.out();
        cout << endl;
        cout << "Введите номер команды:\n\t0 - выход\n\t1 - добавить элемент\n\t2 - удалить элемент\n\t3 - сортировать\n\t4 - очистить\n\t5 - выгрузка в файл" << endl;
        cin >> command;
        if (command == 0)
            return 0;
        else if (command == 1) 
        {
            int local_command = -1;
            cout << "\n\t1 - добавить в начало\n\t2 - добавить в конец\n\t3 - добавить в К-ю позицию\n";
            cin >> local_command;
            cout << "Введите элемент(стоимость, колличество, имя, автор):\n";
            int cost, count; string name, autor;
            cin >> cost >> count >> name >> autor;
            if (local_command == 1) 
                this_list.add_first(cost,count, name, autor);
            else if (local_command == 2)
                this_list.add_k (this_list.size - 1, cost, count, name, autor);
            else if (local_command == 3) 
            {
                int k;
                cout << "Введите номер позиции: "; cin >> k;
                this_list.add_k(k,cost, count, name, autor);
            }
        }
        else if (command == 2) 
        {
            int local_command = -1;
            cout << "\n\t1 - удалить первый\n\t2 - удалить последний\n\t3 - удалить K-ый\n";
            cin >> local_command;
            if (local_command == 1)
                this_list.del_k(0);
            else if (local_command == 2)
                this_list.del_k(this_list.size - 1);
            else if (local_command == 3) 
            {
                int k;
                cout << "Введите номер позиции: "; cin >> k;
                this_list.del_k(k);
            }
        }
        else if(command == 3)
        {
            int local_command = -1;
            cout << "\n\t1 - сортировка по убыванию\n\t2 - сортировка по возростнанию\n"; cin >> local_command;
            if (local_command == 1) this_list.sort_down();
            else if (local_command == 2) this_list.sort_up();
        }
        else if (command == 4) 
        {
            this_list.clear();
        }
        else if (command == 5) 
        {
            this_list.out_file(file_output);
        }
        
    }
    return 0;
}
